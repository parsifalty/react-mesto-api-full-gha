{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._link = config.baseUrl;\n    this._headers = config.headers;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error ${res.status} ${res.statusText}`);\n  }\n  getInitialCards(token) {\n    return fetch(`${this._link}/cards`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  getUserFromServer(token) {\n    return fetch(`${this._link}/users/me`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  setNewUserInfo(data, token) {\n    return fetch(`${this._link}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n  deleteCard(cardId, token) {\n    return fetch(`${this._link}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  addCard(data, token) {\n    return fetch(`${this._link}/cards`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n  changeLikeCardStatus(cardId, isLiked, token) {\n    return fetch(`${this._link}/cards/${cardId}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n  setNewAvatar(data, token) {\n    return fetch(`${this._link}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: \"http://localhost:3000\"\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","config","_link","baseUrl","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","statusText","getInitialCards","token","fetch","method","Authorization","then","getUserFromServer","setNewUserInfo","data","body","JSON","stringify","name","about","deleteCard","cardId","addCard","link","changeLikeCardStatus","isLiked","setNewAvatar","avatar","api"],"sources":["/Users/litvacpaul/Desktop/react-mesto-auth/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor(config) {\n    this._link = config.baseUrl;\n    this._headers = config.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Error ${res.status} ${res.statusText}`);\n  }\n\n  getInitialCards(token) {\n    return fetch(`${this._link}/cards`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }).then(this._checkResponse);\n  }\n\n  getUserFromServer(token) {\n    return fetch(`${this._link}/users/me`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }).then(this._checkResponse);\n  }\n\n  setNewUserInfo(data, token) {\n    return fetch(`${this._link}/users/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  deleteCard(cardId, token) {\n    return fetch(`${this._link}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    }).then(this._checkResponse);\n  }\n\n  addCard(data, token) {\n    return fetch(`${this._link}/cards`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(cardId, isLiked, token) {\n    return fetch(`${this._link}/cards/${cardId}/likes`, {\n      method: isLiked ? \"PUT\" : \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    }).then(this._checkResponse);\n  }\n\n  setNewAvatar(data, token) {\n    return fetch(`${this._link}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        avatar: data.avatar,\n      }),\n    }).then(this._checkResponse);\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"http://localhost:3000\",\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}